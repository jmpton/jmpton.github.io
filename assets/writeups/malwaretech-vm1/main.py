import argparse
import hashlib
import os
import pefile
import sys


class Insn(object):
    """
    Simple class representing an instruction allowing to have pretty names
    """
    def __init__(self, insn):
        self.mnemonic = insn[0]
        self.operand1 = insn[1]
        self.operand2 = insn[2]


class VM(object):
    """
    The virtual machine; support 3 instructions: read, write and xor
    """

    def __init__(self, virtualized):
        self.vreg = 0   # virtual register used in read and xor
        self.pc = 0xff  # virtual eip
        #self.virtualized = bytearray(len(virtualized))  # same as ram.bin
        self.virtualized = bytearray(virtualized)  # same as ram.bin

    def fetch(self):

        # Retrieve the virtual instruction to process
        raw_insn = self.virtualized[self.pc:self.pc+3]

        # Create an Insn() object
        insn = Insn(raw_insn)

        # Update virtual eip
        self.pc += 3

        return insn

    def decode_and_execute(self, insn):

        if insn.mnemonic == 1:
            self.__vm_write(insn)
            return True
        elif insn.mnemonic == 2:
            self.__vm_read(insn)
            return True
        elif insn.mnemonic == 3:
            self.__vm_xor(insn)
            return True
        else:
            print("[-] Unknown mnemonic: {}".format(hex(insn.mnemonic)))
            return False

    def __vm_read(self, insn):
        self.vreg = self.virtualized[insn.operand1]

    def __vm_write(self, insn):
        self.virtualized[insn.operand1] = insn.operand2

    def __vm_xor(self, insn):
        self.virtualized[insn.operand1] ^= self.vreg


def main(pe):

    # Hardcoded values from the sample
    va = 0x404040  # address of virtualized code
    size = 0x1fb   # size

    rva = va - pe.OPTIONAL_HEADER.ImageBase
    virtualized = pe.get_data(rva, size)

    vm = VM(virtualized)

    while True:
        insn = vm.fetch()
        if not vm.decode_and_execute(insn):
            break

    return vm.virtualized


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Solve MalwareTech's VM1 challenge")
    parser.add_argument("sample", type=str, help="Path of the sample")

    args = parser.parse_args()

    if os.path.exists(args.sample):
        with open(args.sample, "rb") as f:
            raw = f.read()
        if hashlib.md5(raw).hexdigest() != "a26389842baf67311d92f371cecf30ff":
            print("[-] File hash doesn't match.")
            sys.exit(0)

        pe = pefile.PE(args.sample)
        result = main(pe)
        print(result)
        sys.exit(0)

    print("[-] File not found.")
    sys.exit(0)
